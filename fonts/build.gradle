plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0' // javafx plugin
}

javafx {
    version = '24.0.1' 
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.media' ] //added javafx dependency
}

group = 'scrabble'
version = '1.0-SNAPSHOT'

// aplication antigua
// application {
//     mainClass = 'scrabble.domain.DomainDriver'
// }

application {
    mainClass = 'scrabble.MainApplication'
}

jar {
    manifest {
        attributes 'Main-Class': application.mainClass.get()
    }

    archiveFileName = 'scrabble.jar'

    from {
        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(22)
    }
}


repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.openjfx:javafx-media:21'
    testImplementation 'junit:junit:4.13.1'
    testImplementation 'org.mockito:mockito-core:3.12.4'
}

test {
    useJUnit()

    testLogging {
        events "passed", "failed", "skipped", "standardOut", "standardError"
        showStandardStreams = true
    }
}

// Configuración de Javadoc para soportar etiquetas personalizadas
javadoc {
    options {
        encoding = 'UTF-8'
        charSet = 'UTF-8'
        author = true
        version = true
        use = true
        windowTitle = "Scrabble API Documentation"
        docTitle = "Scrabble Game - API Documentation"
        
        // Configurar etiquetas personalizadas
        tags = [
            'pre:a:Precondición:',
            'post:a:Postcondición:'
        ]
        
        // Configurar niveles de advertencia
        addStringOption('Xdoclint:none', '-quiet')
        
        // Incluir todos los paquetes
        addStringOption('sourcepath', 'src/main/java')
    }
    
    // Configurar archivos fuente
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
    
    // Configurar directorio de salida
    destinationDir = file("$buildDir/docs/javadoc")
}


sourceSets {
    main {
        resources {
            srcDirs = ["src/main/resources"]
            includes = ["**/*.fxml", "**/*.css", "**/*.properties", "**/*.wav", "**/*.png", "**/*.mp3"]
        }
    }
    temp {
        java.srcDirs = ['src/main/java']
        resources.srcDirs = ['src/main/resources']
        compileClasspath += sourceSets.main.compileClasspath
        runtimeClasspath += sourceSets.main.runtimeClasspath
    }
    
}

// SourceSet antiguo
// sourceSets {
//     temp {
//         java.srcDirs = ['src/main/java']
//         resources.srcDirs = ['src/main/resources']
//         compileClasspath += sourceSets.main.output
//         runtimeClasspath += output + compileClasspath
//     }
    
// }


task runTemp(type: JavaExec) {
    classpath = sourceSets.temp.runtimeClasspath
    mainClass.set(project.hasProperty('mainClass') ? project.getProperty('mainClass') : 'scrabble.DomainDriver')
    standardInput = System.in
    jvmArgs = ['-Dfile.encoding=UTF-8'] // Fuerza UTF-8 en la JVM
}
